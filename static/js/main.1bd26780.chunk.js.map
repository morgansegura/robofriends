{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","robot","id","name","email","username","react_default","a","createElement","className","src","concat","alt","toUpperCase","CardList","map","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","ErrorBoundry_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1bd26780.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\n\nconst Card = ({ robot }) => {\n  const { id, name, email, username } = robot;\n  return (\n    <div id={id} className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\n      <div className=\"tc\">\n        <h2>{name}</h2>\n        <h3>{username.toUpperCase()}</h3>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error(\"Noooooo!\");\n  // }\n  return (\n    <div>\n      {robots.map(robot => (\n        <Card key={robot.id} robot={robot} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return <div className=\"scroll-box\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return !isPending ? (\n      <h1 className=\"tc\">Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f2\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware, logger))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}